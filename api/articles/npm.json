{"title":"npm包安装目录设置的坑","slug":"npm","date":"2016-06-24T14:00:43.000Z","updated":"2016-06-24T14:00:43.000Z","comments":true,"path":"api/articles/npm.json","photos":[],"link":"","excerpt":"npm初认识学习的一段时间内, 发现了许多项目上提供本地安装都是直接输入命令npm install (what)来本地安装. 这种只需要敲敲命令就能安装实在吸引我. 后来我知道了npm是一个Node.js中的包管理工具. 但是我对Node.js和这种管理工具还不是很熟悉. 于是找了几本书, 查阅了几个文档, 看了一下知乎大神的回答. 整理了一下关于Node.js和npm的认识和思路.前置概念Node.js简单的说 Node.js 就是运行在服务端的 JavaScript。<br>Node.js 是一个基于Chrome JavaScript 运行时建立的一个平台。<br>Node.js是一个事件驱动I/O服务端JavaScript环境，基于Google的V8引擎，V8引擎执行Javascript的速度非常快，性能非常好。npmnpm是随同Node.js一起安装的包管理工具","covers":["/images/require_search1.jpg","/images/root.jpg"],"content":"<h1 id=\"npm初认识\"><a href=\"#npm初认识\" class=\"headerlink\" title=\"npm初认识\"></a>npm初认识</h1><p>学习的一段时间内, 发现了许多项目上提供本地安装都是直接输入命令<code>npm install (what)</code>来本地安装. 这种只需要敲敲命令就能安装实在吸引我. 后来我知道了<code>npm</code>是一个<code>Node.js</code>中的包管理工具. 但是我对<code>Node.js</code>和这种管理工具还不是很熟悉. 于是找了几本书, 查阅了几个文档, 看了一下知乎大神的回答. 整理了一下关于<code>Node.js</code>和<code>npm</code>的认识和思路.</p>\n<h1 id=\"前置概念\"><a href=\"#前置概念\" class=\"headerlink\" title=\"前置概念\"></a>前置概念</h1><ul>\n<li>Node.js</li>\n</ul>\n<blockquote>\n<p>简单的说 <code>Node.js</code> 就是运行在服务端的 <code>JavaScript</code>。<br><code>Node.js</code> 是一个基于<code>Chrome JavaScript</code> 运行时建立的一个平台。<br><code>Node.js</code>是一个<strong>事件驱动I/O服务端JavaScript环境</strong>，基于<code>Google</code>的<code>V8</code>引擎，<code>V8</code>引擎执行<code>Javascript</code>的速度非常快，性能非常好。</p>\n</blockquote>\n<ul>\n<li>npm</li>\n</ul>\n<blockquote>\n<p><code>npm</code>是随同<code>Node.js</code>一起安装的包管理工具</p>\n</blockquote>\n<a id=\"more\"></a>\n<h1 id=\"Interesting\"><a href=\"#Interesting\" class=\"headerlink\" title=\"Interesting\"></a>Interesting</h1><ol>\n<li><p>在<code>Node.js</code>的环境中, <code>require({path})</code>函数相当于<code>C++</code>中的<code>#include</code>, 而一个文件中的<code>exports</code>对象, 相当于一个暴露在外面的接口(模块接口对象).</p>\n</li>\n<li><p><code>Node.js</code>若<code>require({path})</code>中<code>{path}</code>只写文件名,不写路径,则<code>Node.js</code>将该文件视为<code>node_modules</code>目录下的一个文件. 有意思的是, 这个<code>node_modules</code>目录会逐渐冒泡到根目录下:</p>\n</li>\n</ol>\n<p><img src=\"/images/require_search1.jpg\" alt=\"require逐级查找\"><br><img src=\"/images/require_search2.jpg\" alt=\"require逐级查找\"></p>\n<ol>\n<li><code>npm install {package} -g</code>这个命令中<code>-g</code>代表全局安装, <code>Node.js</code>在查找模块时最终会寻找全局目录<code>NODE_PATH</code>, 这个目录可以在环境变量中设置, 可以输入命令<code>npm root -g</code>查看全局目录, 执行目录和全局目录是不同的:</li>\n</ol>\n<p><img src=\"/images/root.jpg\" alt=\"全局目录\"></p>\n<p>注意到, 冒泡的目录没有包含到全局目录, 说明直接<code>node ***.js</code>没有开启<code>REPL</code>环境</p>\n","categories":[],"tags":[]}