{"title":"Software Engineering - HomeWork1","slug":"SE-Homework01","date":"2018-03-15T11:44:02.000Z","updated":"2018-03-15T12:25:21.553Z","comments":true,"path":"api/articles/SE-Homework01.json","photos":[],"link":"","excerpt":"Software engineering is “(1) the application of a systematic, disciplined, quantifiable approach to the development, operation, and maintenance of software, that is, the application of engineering to software,” and “(2) the study of approaches as in (1).” – IEEE Standard 610.12","covers":["/images/SE-homework/jiaoyoukeng.jpg"],"content":"<blockquote>\n<p>Software engineering is “(1) the application of a systematic, disciplined, quantifiable approach to the development, operation, and maintenance of software, that is, the application of engineering to software,” and “(2) the study of approaches as in (1).” – IEEE Standard 610.12</p>\n</blockquote>\n<a id=\"more\"></a>\n<p><img src=\"/images/SE-homework/jiaoyoukeng.jpg\" alt=\"焦油坑\"></p>\n<h2 id=\"1、简单题\"><a href=\"#1、简单题\" class=\"headerlink\" title=\"1、简单题\"></a>1、简单题</h2><h3 id=\"软件工程的定义\"><a href=\"#软件工程的定义\" class=\"headerlink\" title=\"软件工程的定义\"></a>软件工程的定义</h3><p>软件工程是将系统化的、规范的、可度量的方法应用于软件的开发、运行和维护，即将工程化方法应用于软件。</p>\n<h3 id=\"阅读经典名著“人月神话”等资料，解释-software-crisis、COCOMO-模型。\"><a href=\"#阅读经典名著“人月神话”等资料，解释-software-crisis、COCOMO-模型。\" class=\"headerlink\" title=\"阅读经典名著“人月神话”等资料，解释 software crisis、COCOMO 模型。\"></a>阅读经典名著“人月神话”等资料，解释 software crisis、COCOMO 模型。</h3><p><code>software crisis</code>，即软件危机。软件危机是指落后的软件生产方式无法满足迅速增长的计算机软件需求，从而导致软件开发与维护过程中出现一系列严重问题的现象。</p>\n<p><code>COCOMO</code>，即<code>constructive cost model</code>，构造性成本模型。是由巴里·勃姆（Barry Boehm）提出的一种软件成本估算方法。这种模型使用一种基本的回归分析公式，使用从项目历史和现状中的某些特征作为参数来进行计算。</p>\n<h3 id=\"软件生命周期\"><a href=\"#软件生命周期\" class=\"headerlink\" title=\"软件生命周期\"></a>软件生命周期</h3><p> 软件生命周期是指软件的产生直到成熟的全部过程。并且衍生出了软件开发模型，常见的有瀑布模型，即：</p>\n<ol>\n<li>需求定义（Requirements）</li>\n<li>设计（Design）</li>\n<li>实作（Implementation）</li>\n<li>整合与测试（Verification）</li>\n<li>移交与维护（Maintenance）</li>\n</ol>\n<h3 id=\"按照-SWEBok-的-KA-划分，本课程关注哪些-KA-或-知识领域？\"><a href=\"#按照-SWEBok-的-KA-划分，本课程关注哪些-KA-或-知识领域？\" class=\"headerlink\" title=\"按照 SWEBok 的 KA 划分，本课程关注哪些 KA 或 知识领域？\"></a>按照 SWEBok 的 KA 划分，本课程关注哪些 KA 或 知识领域？</h3><ol>\n<li>Software requirements 需求</li>\n<li>Software design 设计</li>\n<li>Software construction 构建</li>\n<li>Software testing 测试</li>\n<li>Software maintenance 管理</li>\n<li>Software configuration management 配置管理</li>\n<li>Software engineering management 工程管理</li>\n<li>Software engineering process 工程进程</li>\n<li>Software engineering models and methods 工程模型与方法</li>\n</ol>\n<h3 id=\"解释-CMMI-的五个级别。例如：Level-1-Initial：无序，自发生产模式。\"><a href=\"#解释-CMMI-的五个级别。例如：Level-1-Initial：无序，自发生产模式。\" class=\"headerlink\" title=\"解释 CMMI 的五个级别。例如：Level 1 - Initial：无序，自发生产模式。\"></a>解释 CMMI 的五个级别。例如：Level 1 - Initial：无序，自发生产模式。</h3><ol>\n<li>Level 1 - initial 无序，自发的生产模式。</li>\n<li>Level 2 - Managed 有基本管理程序，能完成任务的生产模式。</li>\n<li>Level 3 - Defined 项目流程制度化，能实现持续生产和模式复制的生产模式。</li>\n<li>Level 4 - Quantitatively Managed 定量精准管理，能把控产品性能和生产流程的生产模式。</li>\n<li>Level 5 - Optimizing 优化管理，能持续更新和改善流程的生产模式。</li>\n</ol>\n<h3 id=\"用自己语言简述-SWEBok-或-CMMI\"><a href=\"#用自己语言简述-SWEBok-或-CMMI\" class=\"headerlink\" title=\"用自己语言简述 SWEBok 或 CMMI\"></a>用自己语言简述 SWEBok 或 CMMI</h3><p><code>SWEBok</code>，即<code>Software Engineering Body of Knowledge</code>， 是国际标准<code>ISO / IEC TR 19759：2005</code>指定的并且普遍接受的软件工程知识体系标准。主要是为我们整理好了软件工程思想上必要的知识架构和知识路线图。</p>\n<p><code>CMMI</code>，即<code>Capability Maturity Model Integration</code>，即能力成熟度模型集成。是一种用于改进软件开发团队对于一个软件项目的掌握和开发的熟练度的评估和改善用的方法。</p>\n<h2 id=\"2、解释-PSP-各项指标及技能要求：\"><a href=\"#2、解释-PSP-各项指标及技能要求：\" class=\"headerlink\" title=\"2、解释 PSP 各项指标及技能要求：\"></a>2、解释 PSP 各项指标及技能要求：</h2><ul>\n<li>阅读《现代软件工程》的 <a href=\"http://www.cnblogs.com/xinz/archive/2011/11/27/2265425.html\" target=\"_blank\" rel=\"noopener\">PSP: Personal Software Process</a> 章节。 </li>\n</ul>\n<h3 id=\"按表格-PSP-2-1，-了解一个软件工程师在接到一个任务之后要做什么，需要哪些技能，解释你打算如何统计每项数据？-（期末考核，每人按开发阶段提交这个表）\"><a href=\"#按表格-PSP-2-1，-了解一个软件工程师在接到一个任务之后要做什么，需要哪些技能，解释你打算如何统计每项数据？-（期末考核，每人按开发阶段提交这个表）\" class=\"headerlink\" title=\"按表格 PSP 2.1， 了解一个软件工程师在接到一个任务之后要做什么，需要哪些技能，解释你打算如何统计每项数据？ （期末考核，每人按开发阶段提交这个表）\"></a>按表格 PSP 2.1， 了解一个软件工程师在接到一个任务之后要做什么，需要哪些技能，解释你打算如何统计每项数据？ （期末考核，每人按开发阶段提交这个表）</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Planning（计划）</span><br><span class=\"line\">  Estimate（评估构建成本）</span><br><span class=\"line\"></span><br><span class=\"line\">Development（开发）</span><br><span class=\"line\">  Analysis（分析需求）</span><br><span class=\"line\">  Design Spec（设计文档）</span><br><span class=\"line\">  Design Review （设计审核）</span><br><span class=\"line\">  Coding Standard（代码规范）</span><br><span class=\"line\">  Design（设计）</span><br><span class=\"line\">  Coding（编程）</span><br><span class=\"line\">  Code Review（代码审核）</span><br><span class=\"line\">  Test（测试）</span><br></pre></td></tr></table></figure>\n<p>要求技能：</p>\n<ul>\n<li>知识：对具体技术的掌握, 动手能力</li>\n<li>经验：对问题领域的知识和经验的积累 (例如: 对于医疗行业的了解, 对于金融行业的了解)。</li>\n<li>通用的软件设计思想</li>\n<li>职业技能包括：自我管理的能力、表达和交流的能力、与人合作的能力、把任务按质按量完成的执行力</li>\n</ul>\n<p>如何统计每项数据？</p>\n<ul>\n<li>分治思想</li>\n<li>评估统计过程中不断迭代。</li>\n</ul>\n","categories":[],"tags":[{"name":"课程作业","slug":"课程作业","count":1,"path":"api/tags/课程作业.json"},{"name":"系统分析与设计","slug":"系统分析与设计","count":1,"path":"api/tags/系统分析与设计.json"}]}