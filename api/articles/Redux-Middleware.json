{"title":"Redux-Middleware 概念思路理解","slug":"Redux-Middleware","date":"2016-07-17T15:02:17.000Z","updated":"2016-07-17T15:02:17.000Z","comments":true,"path":"api/articles/Redux-Middleware.json","photos":[],"link":"","excerpt":"原因中间件这个概念实际上真的不复杂关于Middleware在例如 Express 或者 Koa 框架中，middleware 是指可以被嵌入在框架接收请求到<br>产生响应过程之中的代码例如，Express 或者 Koa 的 middleware 可以完<br>成添加 CORS headers、记录日志、内容压缩等工作。middleware 最优秀的<br>特性就是可以被链式组合。可以理解, middleware 形式如下图:","covers":["/images/middleware001.jpg","/images/middleware002.jpg","/images/middleware003.jpg"],"content":"<h2 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h2><p>中间件这个概念实际上真的不复杂</p>\n<h2 id=\"关于Middleware\"><a href=\"#关于Middleware\" class=\"headerlink\" title=\"关于Middleware\"></a>关于Middleware</h2><blockquote>\n<p>在例如 <code>Express</code> 或者 <code>Koa</code> 框架中，<code>middleware</code> 是指可以被嵌入在框架<strong>接收请求到<br>产生响应过程之中的代码</strong>例如，<code>Express</code> 或者 <code>Koa</code> 的 <code>middleware</code> 可以完<br>成添加 <code>CORS headers</code>、记录日志、内容压缩等工作。<code>middleware</code> 最优秀的<br>特性就是可以被链式组合。</p>\n</blockquote>\n<p>可以理解, <code>middleware</code> 形式如下图:</p>\n<a id=\"more\"></a>\n<p><img src=\"/images/middleware001.jpg\" alt=\"middleware001\"></p>\n<p>主要用途: </p>\n<ul>\n<li>异步的<code>action</code></li>\n<li><code>action</code>过滤</li>\n<li>日志输出</li>\n<li>异常报告</li>\n</ul>\n<h2 id=\"一个典型的Rudex-Middleware\"><a href=\"#一个典型的Rudex-Middleware\" class=\"headerlink\" title=\"一个典型的Rudex-Middleware\"></a>一个典型的Rudex-Middleware</h2><p>这是一个用于日志输出的典型中间件:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//                              ↓↓这里的next实质是一个Dispatch函数</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> logger1 = <span class=\"function\">(<span class=\"params\">&#123;getState&#125;</span>) =&gt;</span> (next) =&gt; <span class=\"function\">(<span class=\"params\">action</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'[logger1]:dispatching'</span>, action);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = next(action);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'[logger1]:next state = '</span>, getState());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>其实这一大串很容易理解:</p>\n<ul>\n<li><code>logger1</code>是一个中间件, 它接收一个”类”<code>store</code>对象, 这个对象必须有函数成员<code>getState()</code>.</li>\n<li><code>logger1</code>这个中间件返回的是一个函数, 这个函数的功能就是修饰<code>Dispatch</code></li>\n<li><code>logger1(store)</code>是一个关于<code>store</code>的用来修饰<code>Dispatch</code>函数的<strong>修饰器</strong>.(或者也可以说是一个加工函数的加工厂)</li>\n</ul>\n<p>上面用图解释就是:<br><img src=\"/images/middleware002.jpg\" alt=\"middleware002\"></p>\n<p>也就是说, <code>Middleware</code>首先要绑定一个<code>store</code>, 这个<code>store</code>需要和它对应的<code>Dispatch</code>函数相关联, 然后<code>middleware(store)</code>则是一个修饰器, 将<code>Dispatch</code>根据自己应该实现的功能给包装起来, 返回一个新的<code>Dispatch</code>函数.</p>\n<h2 id=\"Redux-Middleware的用法\"><a href=\"#Redux-Middleware的用法\" class=\"headerlink\" title=\"Redux-Middleware的用法\"></a>Redux-Middleware的用法</h2><p>以一个加减法示例来说明:</p>\n<h3 id=\"actions-js\"><a href=\"#actions-js\" class=\"headerlink\" title=\"actions.js\"></a>actions.js</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> actionTypes = &#123;</span><br><span class=\"line\">    ADD: <span class=\"string\">'ADD'</span>,</span><br><span class=\"line\">    SUB: <span class=\"string\">'SUB'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> actionCreator = &#123;</span><br><span class=\"line\">    addNum: <span class=\"function\">(<span class=\"params\">num</span>) =&gt;</span> (&#123;</span><br><span class=\"line\">        type: actionTypes.ADD,</span><br><span class=\"line\">        num</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    subNum: <span class=\"function\">(<span class=\"params\">num</span>) =&gt;</span> (&#123;</span><br><span class=\"line\">        type: actionTypes.SUB,</span><br><span class=\"line\">        num</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"reducers-js\"><a href=\"#reducers-js\" class=\"headerlink\" title=\"reducers.js\"></a>reducers.js</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;actionTypes&#125; <span class=\"keyword\">from</span> <span class=\"string\">'./actions.js'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> (state = &#123; <span class=\"attr\">value</span>: <span class=\"number\">0</span> &#125;, action) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (action.type) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> actionTypes.ADD:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.assign(&#123;&#125;, state, &#123;</span><br><span class=\"line\">                value: state.value + action.num</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">case</span> actionTypes.SUB:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.assign(&#123;&#125;, state, &#123;</span><br><span class=\"line\">                value: state.value - action.num</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> state;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"middleware-js\"><a href=\"#middleware-js\" class=\"headerlink\" title=\"middleware.js\"></a>middleware.js</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> logger1 = <span class=\"function\">(<span class=\"params\">&#123;getState&#125;</span>) =&gt;</span> (next) =&gt; <span class=\"function\">(<span class=\"params\">action</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'[来自logger1]:发送了action:'</span>, action);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = next(action);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'[来自logger1]:发送了action:'</span>, getState());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> logger2 = <span class=\"function\">(<span class=\"params\">&#123;getState&#125;</span>) =&gt;</span> (next) =&gt; <span class=\"function\">(<span class=\"params\">action</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'[来自logger2]:发送了action:'</span>, action);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> result = next(action);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'[来自logger2]:捕获到了一个错误: '</span>, error);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'[来自logger2]:发送了action:'</span>, getState());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"index-js\"><a href=\"#index-js\" class=\"headerlink\" title=\"index.js\"></a>index.js</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;createStore&#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> reducers <span class=\"keyword\">from</span> <span class=\"string\">'./reducers.js'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;actionTypes, actionCreator&#125; <span class=\"keyword\">from</span> <span class=\"string\">'./actions.js'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;logger1, logger2&#125; <span class=\"keyword\">from</span> <span class=\"string\">'./middleware.js'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">applyMiddleware</span>(<span class=\"params\">...middlewares</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">createStore</span>) =&gt;</span> (reducer, preloadedState, enhancer) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> store = createStore(reducer, preloadedState, enhancer);</span><br><span class=\"line\">        <span class=\"keyword\">let</span> dispatch = store.dispatch;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> middlewareAPI = &#123;</span><br><span class=\"line\">            getState: store.getState,</span><br><span class=\"line\">            dispatch: <span class=\"function\">(<span class=\"params\">action</span>) =&gt;</span> dispatch(action)</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// chain 中保存的是 绑定了store的中间件        </span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> chain = middlewares.map(<span class=\"function\">(<span class=\"params\">middleware</span>) =&gt;</span> middleware(middlewareAPI));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 将原始的dispatch 一层一层封装起来, 即依次通过绑定了store的中间件</span></span><br><span class=\"line\">        <span class=\"comment\">//         ↓↓↓ 注意这个compose函数        </span></span><br><span class=\"line\">        dispatch = compose(...chain)(store.dispatch);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.assign(&#123;&#125;, store, &#123; dispatch &#125;);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// applyMiddleware 接收一个\"中间件\"数组, 返回的是一个用来修饰createStore的函数</span></span><br><span class=\"line\"><span class=\"comment\">// 所以, 这个applyMiddleware可以这样用</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> createStoreModifyer = applyMiddleware(logger1, logger2);</span><br><span class=\"line\"><span class=\"comment\">// applyMiddleware([logger1,logger2])是一个函数,</span></span><br><span class=\"line\"><span class=\"comment\">// 它接收一个 天然的 createStore 函数, 这个 createStore 来自 redux,</span></span><br><span class=\"line\"><span class=\"comment\">// 返回的是一个经过中间件修饰过的 createStore 函数</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> storeWithLogger = createStoreModifyer(createStore)(reducers);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'------------------------------------------'</span>);</span><br><span class=\"line\">storeWithLogger.dispatch(actionCreator.addNum(<span class=\"number\">3</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'------------------------------------------'</span>);</span><br><span class=\"line\">storeWithLogger.dispatch(actionCreator.subNum(<span class=\"number\">5</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'------------------------------------------'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** 输出结果:</span></span><br><span class=\"line\"><span class=\"comment\">------------------------------------------ </span></span><br><span class=\"line\"><span class=\"comment\">[来自logger1]:发送了action: &#123; type: 'ADD', num: 3 &#125;</span></span><br><span class=\"line\"><span class=\"comment\">[来自logger2]:发送了action: &#123; type: 'ADD', num: 3 &#125;</span></span><br><span class=\"line\"><span class=\"comment\">[来自logger2]:发送了action: &#123; value: 3 &#125;</span></span><br><span class=\"line\"><span class=\"comment\">[来自logger1]:发送了action: &#123; value: 3 &#125;</span></span><br><span class=\"line\"><span class=\"comment\">------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">[来自logger1]:发送了action: &#123; type: 'SUB', num: 5 &#125;</span></span><br><span class=\"line\"><span class=\"comment\">[来自logger2]:发送了action: &#123; type: 'SUB', num: 5 &#125;</span></span><br><span class=\"line\"><span class=\"comment\">[来自logger2]:发送了action: &#123; value: -2 &#125;</span></span><br><span class=\"line\"><span class=\"comment\">[来自logger1]:发送了action: &#123; value: -2 &#125;</span></span><br><span class=\"line\"><span class=\"comment\">------------------------------------------ </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<p> 同样, 注意到在<code>applyMiddleware()</code>函数中有一个<code>compose()</code>函数, 它原来的实现是这样的<br> <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compose</span>(<span class=\"params\">...funcs</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (funcs.length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">arg</span> =&gt;</span> arg</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (funcs.length === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> funcs[<span class=\"number\">0</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> last = funcs[funcs.length - <span class=\"number\">1</span>]; <span class=\"comment\">// 最后一个函数, last是最后一个中间件</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> rest = funcs.slice(<span class=\"number\">0</span>, <span class=\"number\">-1</span>); <span class=\"comment\">// rest数组保存了除了最后一个函数的之前函数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">...args</span>) =&gt;</span> rest.reduceRight(<span class=\"function\">(<span class=\"params\">composed, f</span>) =&gt;</span> f(composed), last(...args))</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回了一个函数, 这个函数接收一个数组参数arg[]</span></span><br><span class=\"line\"><span class=\"comment\">     * 以last(...args)作为初值, 从右边向左边reduce</span></span><br><span class=\"line\"><span class=\"comment\">     * 实际上, 这个args是最原始的dispatch函数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>一看过去, 烦, 繁! 于是我简化了一下<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myCompose</span>(<span class=\"params\">...bindedMiddlewares</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">dispatch</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> modifierArray = [...bindedMiddlewares, dispatch];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 返回的是经过一层一层全部封装好的dispatch函数</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> modifierArray.reduceRight(<span class=\"function\">(<span class=\"params\">modifiedDispatch, bindedMiddleware</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> bindedMiddleware(modifiedDispatch);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"解释\"><a href=\"#解释\" class=\"headerlink\" title=\"解释\"></a>解释</h2><p>中间件实质就是在玩函数加工游戏!!!</p>\n<p>中间件实质就是在玩函数加工游戏!!!</p>\n<p>中间件实质就是在玩函数加工游戏!!!</p>\n<p><code>applyMiddleware()</code>接收一个<code>createStore()</code>和中间件数组, 返回一个通过所有中间件的全新<code>createStore()</code>.其实, 我是通过字面意思理解, 因为这和<code>Function.prototype.apply()</code>很像.<br>其中<code>compose()</code>之后得到的<code>dispatch()</code>函数, 是经过一层一层中间件修饰过的: </p>\n<p>比如, 我们有一个绑定了<code>store</code>的中间件<code>(middleware(store))</code>数组:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[m1, m2, m3]</span><br><span class=\"line\"><span class=\"comment\">// 即[middleware1(store), middleware2(store), middleware3(store)]</span></span><br></pre></td></tr></table></figure></p>\n<p>那么最终得到的<code>dispatch()</code>函数就是<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> dispatch = m1(m2(m3(originDispatch)));</span><br></pre></td></tr></table></figure></p>\n<p>展开就是<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> dispatch = middleware1(store)(middleware2(store)(middleware3(store)(originDispatch)));</span><br></pre></td></tr></table></figure></p>\n<p> 拆分就是</p>\n<p> <img src=\"/images/middleware003.jpg\" alt=\"middleware003\"></p>\n<h2 id=\"本文参考\"><a href=\"#本文参考\" class=\"headerlink\" title=\"本文参考\"></a>本文参考</h2><p> <a href=\"\">Redux官方文档</a></p>\n<p> <a href=\"\">精益React学习指南(Learn React) - 3.3理解redux中间件 - 陈学家_6174</a></p>\n","categories":[],"tags":[]}