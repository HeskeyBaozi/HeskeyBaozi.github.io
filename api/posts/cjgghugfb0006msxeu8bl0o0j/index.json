{"title":"“动静结合” 小白初探静态(词法)作用域与执行环境(EC)","date":"2016-04-07T05:31:32.000Z","updated":"2016-04-07T05:31:32.000Z","comments":true,"excerpt":"<p>从图书馆翻过各种JS的书之后，对<strong>作用域/执行环境/闭包</strong>这些概念有了一个比较清晰的认识。</p>\n<h1 id=\"栗子说明一切\"><a href=\"#栗子说明一切\" class=\"headerlink\" title=\"栗子说明一切\"></a>栗子说明一切</h1><h2 id=\"第一个栗子\"><a href=\"#第一个栗子\" class=\"headerlink\" title=\"第一个栗子\"></a>第一个栗子</h2><p>来看一个来自<a href=\"http://dmitrysoshnikov.com/ecmascript/javascript-the-core/#execution-context\" target=\"_blank\" rel=\"noopener\">ECMA-262</a>的栗子：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> y = <span class=\"number\">20</span>;</span><br><span class=\"line\">  (<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> z = <span class=\"number\">30</span>;</span><br><span class=\"line\">    <span class=\"comment\">// \"x\" and \"y\" are \"free variables\"</span></span><br><span class=\"line\">    <span class=\"comment\">// and are found in the next (after</span></span><br><span class=\"line\">    <span class=\"comment\">// bar's activation object) object</span></span><br><span class=\"line\">    <span class=\"comment\">// of the bar's scope chain</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(x + y + z);</span><br><span class=\"line\">  &#125;)();</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure></p>\n<p>我们可以用下图展现上面的例子(父变量对象存储在函数的<code>Scope</code>属性内)<br><img src=\"http://ww2.sinaimg.cn/large/724c9a82jw1f2qt3du7k5j20650buaa5.jpg\" alt=\"scope-chain.png\"></p>\n<p>首先，可以很容易的理解到一个事实：在从控制台输出<code>x+y+z</code>的时候，<code>x</code>和<code>y</code>是在<code>bar()</code>函数中的作用域链中<code>bar()</code>的活动对象之下找到的。实际上，<code>foo()</code>函数和<code>bar()</code>函数在执行的时候，他们的<code>scope</code>属性就已经确定了，他们的<code>scope</code>属性<strong>确定为他们外层的变量对象(VO)的集合</strong>。从图中可知，内存结构可能是这样的：<br>","source":"_posts/Lang-scope-and-closure.md","full_source":"D:\\WebProject\\my-hexo\\source\\_posts\\Lang-scope-and-closure.md","path":"posts/Lang-scope-and-closure/","permalink":"http://yoursite.com/posts/Lang-scope-and-closure/","photos":[],"link":"","tags":["cjgghugff000amsxegpbe5ysw","cjgghugg00016msxeknmpywpo","cjgghugg3001bmsxerkshc85z","cjgghugg5001gmsxe6p7n0wrn"],"categories":["cjgghugff0009msxeutancr8m","cjgghugfn000mmsxerqp5y9lm"],"post_id":"cjgghugfb0006msxeu8bl0o0j"}