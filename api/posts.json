{"total":21,"pageSize":5,"pageCount":5,"data":[{"title":"卡姆依和犬冢的凄美爱情故事","slug":"my-love","date":"2017-12-16T18:24:24.000Z","updated":"2017-12-16T18:30:28.810Z","comments":true,"path":"api/articles/my-love.json","excerpt":"","keywords":null,"cover":"/images/kamuyi.jpg","content":"<p>真的是太甜了。翻译一下：<br><img src=\"/images/kamuyi.jpg\" alt=\"kamuyi\"></p>\n<blockquote>\n<p>I was a shepherd in a past life.<br>我曾是一名牧师</p>\n</blockquote>\n<p>而犬冢则搭话<br><img src=\"/images/quanzhong.jpg\" alt=\"quanzhong\"></p>\n<blockquote>\n<p>And I was a nun at a convent<br>那我我就是一位修道院的修女</p>\n</blockquote>\n<p><del>真是凄美的爱情故事</del></p>\n","text":"真的是太甜了。翻译一下：<br> [Figure] 那我我就是一位修道院的修女真是凄美的爱情故事","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"随笔","slug":"随笔","count":1,"path":"api/tags/随笔.json"}]},{"title":"Redux-Middleware 概念思路理解","slug":"Redux-Middleware","date":"2016-07-17T15:02:17.000Z","updated":"2016-07-17T15:02:17.000Z","comments":true,"path":"api/articles/Redux-Middleware.json","excerpt":"","keywords":null,"cover":"/images/middleware001.jpg","content":"<h2 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h2><p>中间件这个概念实际上真的不复杂</p>\n<h2 id=\"关于Middleware\"><a href=\"#关于Middleware\" class=\"headerlink\" title=\"关于Middleware\"></a>关于Middleware</h2><blockquote>\n<p>在例如 <code>Express</code> 或者 <code>Koa</code> 框架中，<code>middleware</code> 是指可以被嵌入在框架<strong>接收请求到<br>产生响应过程之中的代码</strong>例如，<code>Express</code> 或者 <code>Koa</code> 的 <code>middleware</code> 可以完<br>成添加 <code>CORS headers</code>、记录日志、内容压缩等工作。<code>middleware</code> 最优秀的<br>特性就是可以被链式组合。</p>\n</blockquote>\n<p>可以理解, <code>middleware</code> 形式如下图:</p>\n<p><img src=\"/images/middleware001.jpg\" alt=\"middleware001\"></p>\n<p>主要用途: </p>\n<ul>\n<li>异步的<code>action</code></li>\n<li><code>action</code>过滤</li>\n<li>日志输出</li>\n<li>异常报告</li>\n</ul>\n<h2 id=\"一个典型的Rudex-Middleware\"><a href=\"#一个典型的Rudex-Middleware\" class=\"headerlink\" title=\"一个典型的Rudex-Middleware\"></a>一个典型的Rudex-Middleware</h2><p>这是一个用于日志输出的典型中间件:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//                              ↓↓这里的next实质是一个Dispatch函数</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> logger1 = <span class=\"function\">(<span class=\"params\">&#123;getState&#125;</span>) =&gt;</span> (next) =&gt; <span class=\"function\">(<span class=\"params\">action</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'[logger1]:dispatching'</span>, action);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = next(action);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'[logger1]:next state = '</span>, getState());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>其实这一大串很容易理解:</p>\n<ul>\n<li><code>logger1</code>是一个中间件, 它接收一个”类”<code>store</code>对象, 这个对象必须有函数成员<code>getState()</code>.</li>\n<li><code>logger1</code>这个中间件返回的是一个函数, 这个函数的功能就是修饰<code>Dispatch</code></li>\n<li><code>logger1(store)</code>是一个关于<code>store</code>的用来修饰<code>Dispatch</code>函数的<strong>修饰器</strong>.(或者也可以说是一个加工函数的加工厂)</li>\n</ul>\n<p>上面用图解释就是:<br><img src=\"/images/middleware002.jpg\" alt=\"middleware002\"></p>\n<p>也就是说, <code>Middleware</code>首先要绑定一个<code>store</code>, 这个<code>store</code>需要和它对应的<code>Dispatch</code>函数相关联, 然后<code>middleware(store)</code>则是一个修饰器, 将<code>Dispatch</code>根据自己应该实现的功能给包装起来, 返回一个新的<code>Dispatch</code>函数.</p>\n<h2 id=\"Redux-Middleware的用法\"><a href=\"#Redux-Middleware的用法\" class=\"headerlink\" title=\"Redux-Middleware的用法\"></a>Redux-Middleware的用法</h2><p>以一个加减法示例来说明:</p>\n<h3 id=\"actions-js\"><a href=\"#actions-js\" class=\"headerlink\" title=\"actions.js\"></a>actions.js</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> actionTypes = &#123;</span><br><span class=\"line\">    ADD: <span class=\"string\">'ADD'</span>,</span><br><span class=\"line\">    SUB: <span class=\"string\">'SUB'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> actionCreator = &#123;</span><br><span class=\"line\">    addNum: <span class=\"function\">(<span class=\"params\">num</span>) =&gt;</span> (&#123;</span><br><span class=\"line\">        type: actionTypes.ADD,</span><br><span class=\"line\">        num</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    subNum: <span class=\"function\">(<span class=\"params\">num</span>) =&gt;</span> (&#123;</span><br><span class=\"line\">        type: actionTypes.SUB,</span><br><span class=\"line\">        num</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"reducers-js\"><a href=\"#reducers-js\" class=\"headerlink\" title=\"reducers.js\"></a>reducers.js</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;actionTypes&#125; <span class=\"keyword\">from</span> <span class=\"string\">'./actions.js'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> (state = &#123; <span class=\"attr\">value</span>: <span class=\"number\">0</span> &#125;, action) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (action.type) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> actionTypes.ADD:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.assign(&#123;&#125;, state, &#123;</span><br><span class=\"line\">                value: state.value + action.num</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">case</span> actionTypes.SUB:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.assign(&#123;&#125;, state, &#123;</span><br><span class=\"line\">                value: state.value - action.num</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> state;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"middleware-js\"><a href=\"#middleware-js\" class=\"headerlink\" title=\"middleware.js\"></a>middleware.js</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> logger1 = <span class=\"function\">(<span class=\"params\">&#123;getState&#125;</span>) =&gt;</span> (next) =&gt; <span class=\"function\">(<span class=\"params\">action</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'[来自logger1]:发送了action:'</span>, action);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = next(action);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'[来自logger1]:发送了action:'</span>, getState());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> logger2 = <span class=\"function\">(<span class=\"params\">&#123;getState&#125;</span>) =&gt;</span> (next) =&gt; <span class=\"function\">(<span class=\"params\">action</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'[来自logger2]:发送了action:'</span>, action);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> result = next(action);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'[来自logger2]:捕获到了一个错误: '</span>, error);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'[来自logger2]:发送了action:'</span>, getState());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"index-js\"><a href=\"#index-js\" class=\"headerlink\" title=\"index.js\"></a>index.js</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;createStore&#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> reducers <span class=\"keyword\">from</span> <span class=\"string\">'./reducers.js'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;actionTypes, actionCreator&#125; <span class=\"keyword\">from</span> <span class=\"string\">'./actions.js'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;logger1, logger2&#125; <span class=\"keyword\">from</span> <span class=\"string\">'./middleware.js'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">applyMiddleware</span>(<span class=\"params\">...middlewares</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">createStore</span>) =&gt;</span> (reducer, preloadedState, enhancer) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> store = createStore(reducer, preloadedState, enhancer);</span><br><span class=\"line\">        <span class=\"keyword\">let</span> dispatch = store.dispatch;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> middlewareAPI = &#123;</span><br><span class=\"line\">            getState: store.getState,</span><br><span class=\"line\">            dispatch: <span class=\"function\">(<span class=\"params\">action</span>) =&gt;</span> dispatch(action)</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// chain 中保存的是 绑定了store的中间件        </span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> chain = middlewares.map(<span class=\"function\">(<span class=\"params\">middleware</span>) =&gt;</span> middleware(middlewareAPI));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 将原始的dispatch 一层一层封装起来, 即依次通过绑定了store的中间件</span></span><br><span class=\"line\">        <span class=\"comment\">//         ↓↓↓ 注意这个compose函数        </span></span><br><span class=\"line\">        dispatch = compose(...chain)(store.dispatch);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.assign(&#123;&#125;, store, &#123; dispatch &#125;);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// applyMiddleware 接收一个\"中间件\"数组, 返回的是一个用来修饰createStore的函数</span></span><br><span class=\"line\"><span class=\"comment\">// 所以, 这个applyMiddleware可以这样用</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> createStoreModifyer = applyMiddleware(logger1, logger2);</span><br><span class=\"line\"><span class=\"comment\">// applyMiddleware([logger1,logger2])是一个函数,</span></span><br><span class=\"line\"><span class=\"comment\">// 它接收一个 天然的 createStore 函数, 这个 createStore 来自 redux,</span></span><br><span class=\"line\"><span class=\"comment\">// 返回的是一个经过中间件修饰过的 createStore 函数</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> storeWithLogger = createStoreModifyer(createStore)(reducers);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'------------------------------------------'</span>);</span><br><span class=\"line\">storeWithLogger.dispatch(actionCreator.addNum(<span class=\"number\">3</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'------------------------------------------'</span>);</span><br><span class=\"line\">storeWithLogger.dispatch(actionCreator.subNum(<span class=\"number\">5</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'------------------------------------------'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** 输出结果:</span></span><br><span class=\"line\"><span class=\"comment\">------------------------------------------ </span></span><br><span class=\"line\"><span class=\"comment\">[来自logger1]:发送了action: &#123; type: 'ADD', num: 3 &#125;</span></span><br><span class=\"line\"><span class=\"comment\">[来自logger2]:发送了action: &#123; type: 'ADD', num: 3 &#125;</span></span><br><span class=\"line\"><span class=\"comment\">[来自logger2]:发送了action: &#123; value: 3 &#125;</span></span><br><span class=\"line\"><span class=\"comment\">[来自logger1]:发送了action: &#123; value: 3 &#125;</span></span><br><span class=\"line\"><span class=\"comment\">------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">[来自logger1]:发送了action: &#123; type: 'SUB', num: 5 &#125;</span></span><br><span class=\"line\"><span class=\"comment\">[来自logger2]:发送了action: &#123; type: 'SUB', num: 5 &#125;</span></span><br><span class=\"line\"><span class=\"comment\">[来自logger2]:发送了action: &#123; value: -2 &#125;</span></span><br><span class=\"line\"><span class=\"comment\">[来自logger1]:发送了action: &#123; value: -2 &#125;</span></span><br><span class=\"line\"><span class=\"comment\">------------------------------------------ </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<p> 同样, 注意到在<code>applyMiddleware()</code>函数中有一个<code>compose()</code>函数, 它原来的实现是这样的<br> <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compose</span>(<span class=\"params\">...funcs</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (funcs.length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">arg</span> =&gt;</span> arg</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (funcs.length === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> funcs[<span class=\"number\">0</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> last = funcs[funcs.length - <span class=\"number\">1</span>]; <span class=\"comment\">// 最后一个函数, last是最后一个中间件</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> rest = funcs.slice(<span class=\"number\">0</span>, <span class=\"number\">-1</span>); <span class=\"comment\">// rest数组保存了除了最后一个函数的之前函数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">...args</span>) =&gt;</span> rest.reduceRight(<span class=\"function\">(<span class=\"params\">composed, f</span>) =&gt;</span> f(composed), last(...args))</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回了一个函数, 这个函数接收一个数组参数arg[]</span></span><br><span class=\"line\"><span class=\"comment\">     * 以last(...args)作为初值, 从右边向左边reduce</span></span><br><span class=\"line\"><span class=\"comment\">     * 实际上, 这个args是最原始的dispatch函数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>一看过去, 烦, 繁! 于是我简化了一下<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myCompose</span>(<span class=\"params\">...bindedMiddlewares</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">dispatch</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> modifierArray = [...bindedMiddlewares, dispatch];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 返回的是经过一层一层全部封装好的dispatch函数</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> modifierArray.reduceRight(<span class=\"function\">(<span class=\"params\">modifiedDispatch, bindedMiddleware</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> bindedMiddleware(modifiedDispatch);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"解释\"><a href=\"#解释\" class=\"headerlink\" title=\"解释\"></a>解释</h2><p>中间件实质就是在玩函数加工游戏!!!</p>\n<p>中间件实质就是在玩函数加工游戏!!!</p>\n<p>中间件实质就是在玩函数加工游戏!!!</p>\n<p><code>applyMiddleware()</code>接收一个<code>createStore()</code>和中间件数组, 返回一个通过所有中间件的全新<code>createStore()</code>.其实, 我是通过字面意思理解, 因为这和<code>Function.prototype.apply()</code>很像.<br>其中<code>compose()</code>之后得到的<code>dispatch()</code>函数, 是经过一层一层中间件修饰过的: </p>\n<p>比如, 我们有一个绑定了<code>store</code>的中间件<code>(middleware(store))</code>数组:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[m1, m2, m3]</span><br><span class=\"line\"><span class=\"comment\">// 即[middleware1(store), middleware2(store), middleware3(store)]</span></span><br></pre></td></tr></table></figure></p>\n<p>那么最终得到的<code>dispatch()</code>函数就是<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> dispatch = m1(m2(m3(originDispatch)));</span><br></pre></td></tr></table></figure></p>\n<p>展开就是<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> dispatch = middleware1(store)(middleware2(store)(middleware3(store)(originDispatch)));</span><br></pre></td></tr></table></figure></p>\n<p> 拆分就是</p>\n<p> <img src=\"/images/middleware003.jpg\" alt=\"middleware003\"></p>\n<h2 id=\"本文参考\"><a href=\"#本文参考\" class=\"headerlink\" title=\"本文参考\"></a>本文参考</h2><p> <a href=\"\">Redux官方文档</a></p>\n<p> <a href=\"\">精益React学习指南(Learn React) - 3.3理解redux中间件 - 陈学家_6174</a></p>\n","text":"原因中间件这个概念实际上真的不复杂关于Middleware在例如 Express 或者 Koa 框架中，middleware 是指可以被嵌入在框架接收请求到<br>产生响应过程之中的代码例如，Express 或者 Koa 的 middleware 可以完<br>成添加 CORS ","link":"","raw":null,"photos":[],"categories":[],"tags":[]},{"title":"npm包安装目录设置的坑","slug":"npm","date":"2016-06-24T14:00:43.000Z","updated":"2016-06-24T14:00:43.000Z","comments":true,"path":"api/articles/npm.json","excerpt":"","keywords":null,"cover":"/images/require_search1.jpg","content":"<h1 id=\"npm初认识\"><a href=\"#npm初认识\" class=\"headerlink\" title=\"npm初认识\"></a>npm初认识</h1><p>学习的一段时间内, 发现了许多项目上提供本地安装都是直接输入命令<code>npm install (what)</code>来本地安装. 这种只需要敲敲命令就能安装实在吸引我. 后来我知道了<code>npm</code>是一个<code>Node.js</code>中的包管理工具. 但是我对<code>Node.js</code>和这种管理工具还不是很熟悉. 于是找了几本书, 查阅了几个文档, 看了一下知乎大神的回答. 整理了一下关于<code>Node.js</code>和<code>npm</code>的认识和思路.</p>\n<h1 id=\"前置概念\"><a href=\"#前置概念\" class=\"headerlink\" title=\"前置概念\"></a>前置概念</h1><ul>\n<li>Node.js</li>\n</ul>\n<blockquote>\n<p>简单的说 <code>Node.js</code> 就是运行在服务端的 <code>JavaScript</code>。<br><code>Node.js</code> 是一个基于<code>Chrome JavaScript</code> 运行时建立的一个平台。<br><code>Node.js</code>是一个<strong>事件驱动I/O服务端JavaScript环境</strong>，基于<code>Google</code>的<code>V8</code>引擎，<code>V8</code>引擎执行<code>Javascript</code>的速度非常快，性能非常好。</p>\n</blockquote>\n<ul>\n<li>npm</li>\n</ul>\n<blockquote>\n<p><code>npm</code>是随同<code>Node.js</code>一起安装的包管理工具</p>\n</blockquote>\n<h1 id=\"Interesting\"><a href=\"#Interesting\" class=\"headerlink\" title=\"Interesting\"></a>Interesting</h1><ol>\n<li><p>在<code>Node.js</code>的环境中, <code>require({path})</code>函数相当于<code>C++</code>中的<code>#include</code>, 而一个文件中的<code>exports</code>对象, 相当于一个暴露在外面的接口(模块接口对象).</p>\n</li>\n<li><p><code>Node.js</code>若<code>require({path})</code>中<code>{path}</code>只写文件名,不写路径,则<code>Node.js</code>将该文件视为<code>node_modules</code>目录下的一个文件. 有意思的是, 这个<code>node_modules</code>目录会逐渐冒泡到根目录下:</p>\n</li>\n</ol>\n<p><img src=\"/images/require_search1.jpg\" alt=\"require逐级查找\"><br><img src=\"/images/require_search2.jpg\" alt=\"require逐级查找\"></p>\n<ol>\n<li><code>npm install {package} -g</code>这个命令中<code>-g</code>代表全局安装, <code>Node.js</code>在查找模块时最终会寻找全局目录<code>NODE_PATH</code>, 这个目录可以在环境变量中设置, 可以输入命令<code>npm root -g</code>查看全局目录, 执行目录和全局目录是不同的:</li>\n</ol>\n<p><img src=\"/images/root.jpg\" alt=\"全局目录\"></p>\n<p>注意到, 冒泡的目录没有包含到全局目录, 说明直接<code>node ***.js</code>没有开启<code>REPL</code>环境</p>\n","text":"npm初认识学习的一段时间内, 发现了许多项目上提供本地安装都是直接输入命令npm install (what)来本地安装. 这种只需要敲敲命令就能安装实在吸引我. 后来我知道了npm是一个Node.js中的包管理工具. 但是我对Node.js和这种管理工具还不是很熟悉. 于是找","link":"","raw":null,"photos":[],"categories":[],"tags":[]},{"title":"自翻译:创建一个你自己的CSS栅格系统","slug":"CSS-CSS-Grid","date":"2016-04-14T14:01:58.000Z","updated":"2016-04-14T14:01:58.000Z","comments":true,"path":"api/articles/CSS-CSS-Grid.json","excerpt":"<h1 id=\"原文引荐\"><a href=\"#原文引荐\" class=\"headerlink\" title=\"原文引荐\"></a>原文引荐</h1><p>原文为<a href=\"http://j4n.co/blog/Creating-your-own-css-grid-system\" target=\"_blank\" rel=\"noopener\">Creating Your Own CSS Grid System</a>, 原网站来自<a href=\"http://j4n.co/#home\" target=\"_blank\" rel=\"noopener\">Jan Drewniak</a></p>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>CSS栅格网络(CSS Grids)已经存在一段时间了。这些栅格网络往往和一些像<code>Bootstrap</code>的框架捆绑在一起使用。我并不是一个<code>Bootstrap</code>厌恶者，但是如果你真正的需要只是一个栅格网络的时候，使用一个框架也只是“焉用牛刀”。这里将展示如何从头开始制作一个你自己的CSS栅格网络。</p>\n<h1 id=\"CSS栅格的元素\"><a href=\"#CSS栅格的元素\" class=\"headerlink\" title=\"CSS栅格的元素\"></a>CSS栅格的元素</h1><p><img src=\"http://j4n.co/content/4-blog/10-Creating-your-own-css-grid-system/grid-elements.png\" alt=\"grid-elements\"><br>从图中我们可以看到，一个基本的栅格只包含了一些必要元素。</p>\n<ul>\n<li>一个容器(container)</li>\n<li>行(rows)</li>\n<li>列(columns)</li>\n<li>间隙(gutters)（指的是列与列之间的空隙）</li>\n</ul>","keywords":null,"cover":"http://j4n.co/content/4-blog/10-Creating-your-own-css-grid-system/grid-elements.png","content":null,"text":"原文引荐原文为Creating Your Own CSS Grid System, 原网站来自Jan Drewniak前言CSS栅格网络(CSS Grids)已经存在一段时间了。这些栅格网络往往和一些像Bootstrap的框架捆绑在一起使用。我并不是一个Bootstrap厌恶者，","link":"","raw":null,"photos":[],"categories":[{"name":"HTML/CSS","slug":"HTML-CSS","count":1,"path":"api/categories/HTML-CSS.json"},{"name":"CSS","slug":"HTML-CSS/CSS","count":1,"path":"api/categories/HTML-CSS/CSS.json"}],"tags":[{"name":"前端","slug":"前端","count":2,"path":"api/tags/前端.json"},{"name":"CSS","slug":"CSS","count":1,"path":"api/tags/CSS.json"},{"name":"自翻译","slug":"自翻译","count":1,"path":"api/tags/自翻译.json"},{"name":"Bootstrap","slug":"Bootstrap","count":1,"path":"api/tags/Bootstrap.json"},{"name":"CSS Grid","slug":"CSS-Grid","count":1,"path":"api/tags/CSS-Grid.json"}]},{"title":"“动静结合” 小白初探静态(词法)作用域与执行环境(EC)","slug":"Lang-scope-and-closure","date":"2016-04-07T05:31:32.000Z","updated":"2016-04-07T05:31:32.000Z","comments":true,"path":"api/articles/Lang-scope-and-closure.json","excerpt":"<p>从图书馆翻过各种JS的书之后，对<strong>作用域/执行环境/闭包</strong>这些概念有了一个比较清晰的认识。</p>\n<h1 id=\"栗子说明一切\"><a href=\"#栗子说明一切\" class=\"headerlink\" title=\"栗子说明一切\"></a>栗子说明一切</h1><h2 id=\"第一个栗子\"><a href=\"#第一个栗子\" class=\"headerlink\" title=\"第一个栗子\"></a>第一个栗子</h2><p>来看一个来自<a href=\"http://dmitrysoshnikov.com/ecmascript/javascript-the-core/#execution-context\" target=\"_blank\" rel=\"noopener\">ECMA-262</a>的栗子：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> y = <span class=\"number\">20</span>;</span><br><span class=\"line\">  (<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> z = <span class=\"number\">30</span>;</span><br><span class=\"line\">    <span class=\"comment\">// \"x\" and \"y\" are \"free variables\"</span></span><br><span class=\"line\">    <span class=\"comment\">// and are found in the next (after</span></span><br><span class=\"line\">    <span class=\"comment\">// bar's activation object) object</span></span><br><span class=\"line\">    <span class=\"comment\">// of the bar's scope chain</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(x + y + z);</span><br><span class=\"line\">  &#125;)();</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure></p>\n<p>我们可以用下图展现上面的例子(父变量对象存储在函数的<code>Scope</code>属性内)<br><img src=\"http://ww2.sinaimg.cn/large/724c9a82jw1f2qt3du7k5j20650buaa5.jpg\" alt=\"scope-chain.png\"></p>\n<p>首先，可以很容易的理解到一个事实：在从控制台输出<code>x+y+z</code>的时候，<code>x</code>和<code>y</code>是在<code>bar()</code>函数中的作用域链中<code>bar()</code>的活动对象之下找到的。实际上，<code>foo()</code>函数和<code>bar()</code>函数在执行的时候，他们的<code>scope</code>属性就已经确定了，他们的<code>scope</code>属性<strong>确定为他们外层的变量对象(VO)的集合</strong>。从图中可知，内存结构可能是这样的：<br>","keywords":null,"cover":"http://ww2.sinaimg.cn/large/724c9a82jw1f2qt3du7k5j20650buaa5.jpg","content":null,"text":"从图书馆翻过各种JS的书之后，对作用域/执行环境/闭包这些概念有了一个比较清晰的认识。栗子说明一切第一个栗子来看一个来自ECMA-262的栗子：<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>1","link":"","raw":null,"photos":[],"categories":[{"name":"Program Language","slug":"Program-Language","count":1,"path":"api/categories/Program-Language.json"},{"name":"JavaScript","slug":"Program-Language/JavaScript","count":1,"path":"api/categories/Program-Language/JavaScript.json"}],"tags":[{"name":"前端","slug":"前端","count":2,"path":"api/tags/前端.json"},{"name":"JavaScript","slug":"JavaScript","count":1,"path":"api/tags/JavaScript.json"},{"name":"作用域链","slug":"作用域链","count":1,"path":"api/tags/作用域链.json"},{"name":"闭包","slug":"闭包","count":1,"path":"api/tags/闭包.json"}]}]}