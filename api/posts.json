{"total":30,"pageSize":5,"pageCount":6,"data":[{"title":"软件架构与框架","slug":"flux","date":"2018-06-02T06:04:45.000Z","updated":"2018-06-06T13:12:24.573Z","comments":true,"path":"api/articles/flux.json","excerpt":"","keywords":null,"cover":"/images/uml-builder/3layer.png","content":"<h2 id=\"描述软件架构与框架之间的区别与联系\"><a href=\"#描述软件架构与框架之间的区别与联系\" class=\"headerlink\" title=\"描述软件架构与框架之间的区别与联系\"></a>描述软件架构与框架之间的区别与联系</h2><p>首先，从定义出发，软件架构就是把系统分解为一些部件，描述这些部件的职责及它们之间的协作行为。框架是特定语言和技术的架构应用解决方案。</p>\n<p>从我的个人理解上，架构是抽象层面上的系统设计，例如前后端分离架构。而框架则是具体到编程的地步，比如前端的<code>Vue</code>、<code>React</code>框架等等。</p>\n<h2 id=\"绘制三层架构模型图，细致到分区\"><a href=\"#绘制三层架构模型图，细致到分区\" class=\"headerlink\" title=\"绘制三层架构模型图，细致到分区\"></a>绘制三层架构模型图，细致到分区</h2><p>简单地说，我们的扫码点餐系统三层架构也十分典型</p>\n<p><img src=\"/images/uml-builder/3layer.png\" alt=\"3layer\"></p>\n<h2 id=\"结合你程序的结构，从程序员角度说明三层架构给开发者带来的便利\"><a href=\"#结合你程序的结构，从程序员角度说明三层架构给开发者带来的便利\" class=\"headerlink\" title=\"结合你程序的结构，从程序员角度说明三层架构给开发者带来的便利\"></a>结合你程序的结构，从程序员角度说明三层架构给开发者带来的便利</h2><p>细化起来，最典型也是我最想说的就是前后端分离。具体来说，每次项目评审后，前后端会先一起约定好接口，之后分别进行开发。通常前端会在本地先写好Demo并跑通前端逻辑，之后再将html文件交给后端开发模板。正式基于这样的开发模式，导致了总工作量的增加，同时沟通和联调成本的消耗也十分显著。为了解决问题，引入前后端分离的解决方案，即：<strong>后端只专注于提供接口，前端全权负责页面的展示</strong>。</p>\n<p>而且，如果人的能力强，当然可以全栈开发。且小团队肯定效率更高。反过来，跨职能联调这种事情，必定非常低效，且多后患，应极力避免。</p>\n<h2 id=\"研究-Vue-与-Flux-状态管理的异同\"><a href=\"#研究-Vue-与-Flux-状态管理的异同\" class=\"headerlink\" title=\"研究 Vue 与 Flux 状态管理的异同\"></a>研究 <code>Vue</code> 与 <code>Flux</code> 状态管理的异同</h2><p>深入了解前端后，两种状态管理都很好而且都有自己的使用场景。</p>\n<p><code>Flux</code>的典型实现就是<code>Redux</code>，深刻地贯彻了新状态就是旧状态与<code>Action</code>的<strong>纯函数</strong>。可以使我的<code>Store</code>纯净可追溯，这就注定了这一套流程必须走函数式编程的路线，而且天生契合不可变数据（Immutable Data）。</p>\n<p>而<code>Vue</code>则是响应式数据管理的典范，但是我觉得，<code>Rxjs</code>和<code>Mobx</code>更可以说是响应式数据流，用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p>\n<p>两者我的评价如何，都不错，但是如果是我在开发前端，并且使用状态管理工具，我想我会选择<code>Mobx-State-Tree</code>。他使用了全新的概念<code>SnapShot</code>，使得我似乎找到了响应式数据和不可变数据的中间态——快照。响应式数据可以随时生成快照，并且用于不可变数据之间的比较<code>===</code>。同时不可变数据的快照也能随时应用（apply）到响应式的<code>store</code>中，触发渲染，这套成熟的体系我觉得非常值得大家认可。</p>\n","text":"描述软件架构与框架之间的区别与联系首先，从定义出发，软件架构就是把系统分解为一些部件，描述这些部件的职责及它们之间的协作行为。框架是特定语言和技术的架构应用解决方案。从我的个人理解上，架构是抽象层面上的系统设计，例如前后端分离架构。而框架则是具体到编程的地步，比如前端的Vue、R","link":"","raw":null,"photos":[],"categories":[],"tags":[]},{"title":"其他小组系统建模","slug":"lesson9","date":"2018-05-11T16:42:01.000Z","updated":"2018-05-14T05:34:04.604Z","comments":true,"path":"api/articles/lesson9.json","excerpt":"<p>一个待办事项移动应用：</p>\n<p><a href=\"https://github.com/SevenKingdoms/Dashboard/blob/master/modeling_practice/%E5%BB%BA%E6%A8%A1%E6%96%87%E6%A1%A3.pdf\" target=\"_blank\" rel=\"noopener\">分析对象</a></p>","keywords":null,"cover":"/images/uml-builder/l9_use_case.png","content":null,"text":"一个待办事项移动应用：分析对象用例分析图 [Figure] seq.png","link":"","raw":null,"photos":[],"categories":[],"tags":[]},{"title":"对象状态建模","slug":"uml-state-model","date":"2018-05-06T11:45:19.000Z","updated":"2018-05-06T12:07:58.939Z","comments":true,"path":"api/articles/uml-state-model.json","excerpt":"<h2 id=\"使用-UML-State-Model\"><a href=\"#使用-UML-State-Model\" class=\"headerlink\" title=\"使用 UML State Model\"></a>使用 UML State Model</h2><ul>\n<li>建模对象： 参考<code>Asg_RH</code> 文档， 对<code>Reservation/Order</code>对象建模。</li>\n</ul>","keywords":null,"cover":"/images/uml-builder/dingdan.png","content":null,"text":"使用 UML State Model建模对象： 参考Asg_RH 文档， 对Reservation/Order对象建模。 [Figure] ","link":"","raw":null,"photos":[],"categories":[],"tags":[]},{"title":"领域建模相关作业","slug":"lesson7","date":"2018-04-29T15:35:18.000Z","updated":"2018-05-06T11:46:11.122Z","comments":true,"path":"api/articles/lesson7.json","excerpt":"<h2 id=\"领域建模\"><a href=\"#领域建模\" class=\"headerlink\" title=\"领域建模\"></a>领域建模</h2><ul>\n<li>阅读 <code>Asg_RH</code> 文档，按用例构建领域模型。</li>\n</ul>","keywords":null,"cover":"/images/uml-builder/asg.png","content":null,"text":"领域建模阅读 Asg_RH 文档，按用例构建领域模型。 [Figure] 二者异同相同：概念转化不同：领域模型主要关注现实世界的行为、对象和各种概念，是一种浅层次的抽象；数据库逻辑模型更为具体。","link":"","raw":null,"photos":[],"categories":[],"tags":[]},{"title":"用例建模","slug":"uml-builder","date":"2018-04-20T13:36:25.000Z","updated":"2018-05-06T11:46:40.792Z","comments":true,"path":"api/articles/uml-builder.json","excerpt":"<h2 id=\"用例建模\"><a href=\"#用例建模\" class=\"headerlink\" title=\"用例建模\"></a>用例建模</h2><blockquote>\n<p>阅读 Asg_RH 文档，绘制用例图。 按 Task1 要求，请使用工具 UMLet，截图格式务必是 png 并控制尺寸</p>\n</blockquote>","keywords":null,"cover":"/images/uml-builder/hotel.png","content":null,"text":"用例建模阅读 Asg_RH 文档，绘制用例图。 按 Task1 要求，请使用工具 UMLet，截图格式务必是 png 并控制尺寸 [Figure] 用例文本编写在大作业基础上，分析三种用例文本的优点和缺点摘要：简单但是缺少细节非正式用例：较详细但不正式详述用例：详细细致，但实现成","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"课程作业","slug":"课程作业","count":3,"path":"api/tags/课程作业.json"},{"name":"系统分析与设计","slug":"系统分析与设计","count":3,"path":"api/tags/系统分析与设计.json"}]}]}